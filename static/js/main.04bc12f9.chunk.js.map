{"version":3,"sources":["component/CircleSelector/CircleSelector.jsx","component/Circles/Circles.jsx","App.js","serviceWorker.js","index.js"],"names":["CircleSelectors","props","check","z","currentCircle","console","log","className","circles","map","circle","idx","key","id","onClick","e","selectCircle","target","Circles","App","state","bind","this","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uSA+BeA,G,YA3BS,SAACC,GACzB,SAASC,EAAMC,GACX,GAAGA,GAAKF,EAAMG,cAGV,OAFAC,QAAQC,IAAR,iBAAsBL,EAAMG,gBAC5BC,QAAQC,IAAR,mBAAwBH,IACjB,WAMf,OACI,yBAAKI,UAAU,kBAGbN,EAAMO,QAAQC,KAAI,SAACC,EAAQC,GAAT,OAChB,4BACCC,IAAKD,EACJE,GAAIF,EAAM,EACZJ,UAAWL,EAAMS,EAAM,GACrBG,QAAS,SAAAC,GAAC,OAAId,EAAMe,aAAaD,EAAEE,OAAOJ,MAJ5C,mBAKgBH,SCVTQ,G,MAZC,SAACjB,GAAD,OAEd,yBAAKM,UAAU,WACZN,EAAMO,QAAQC,KAAI,SAACC,EAAQC,GAAT,OACjB,yBAAKC,IAAKD,EAAM,EAChBJ,UAAWI,EAAM,GAAKV,EAAMG,cAAgB,WAAa,IADzD,IAC+DM,SC2BtDS,E,kDA7Bb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDmB,MAAQ,CACXhB,cAAe,IACfI,QAAS,CAAC,EAAE,EAAE,EAAE,IAGtB,EAAKQ,aAAe,EAAKA,aAAaK,KAAlB,gBAPC,E,yDAUPR,GACZR,QAAQC,IAAR,2BAAgCO,IAClCS,KAAKC,SAAS,CAACnB,cAAeS,IAC9BR,QAAQC,IAAIgB,KAAKF,MAAMhB,iB,+BAInB,OACE,yBAAKG,UAAU,OACb,4BAAQA,UAAU,cAAlB,2BACA,8BACC,kBAAC,EAAD,CAAiBC,QAASc,KAAKF,MAAMZ,QAAUJ,cAAekB,KAAKF,MAAMhB,cAAeY,aAAcM,KAAKN,eAC3G,kBAAC,EAAD,CAASR,QAASc,KAAKF,MAAMZ,QAASJ,cAAekB,KAAKF,MAAMhB,sB,GAvBvDoB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.04bc12f9.chunk.js","sourcesContent":["import React from 'react';\nimport './CircleSelector.css';\n\n\nconst CircleSelectors = (props) => {\nfunction check(z) {\n    if(z == props.currentCircle) {\n        console.log(`state: ${props.currentCircle}`)\n        console.log(`current: ${z}`)\n        return 'selected';\n    } else {\n      \n        // console.log('')\n    }\n}\nreturn(\n    <div className='CircleSelector'>\n     \n      {\n      props.circles.map((circle, idx) =>\n        <button\n         key={idx}\n          id={idx + 1}\n        className={check(idx + 1)}\n          onClick={e => props.selectCircle(e.target.id)}\n      >Selected Circle {circle}</button> \n      )}\n    </div>\n)\n  };\n\nexport default CircleSelectors;","import React from 'react';\nimport './Circles.css';\n\nconst Circles = (props) => (\n\n  <div className='Circles'>\n    {props.circles.map((circle, idx) =>\n      <div key={idx + 1}\n      className={idx + 1 == props.currentCircle ? \"selected\" : \"\"}> {circle}</div> \n    )}\n  \n  </div>\n\n);\n\nexport default Circles;","import React, { Component } from 'react';\nimport './App.css';\nimport CircleSelectors from './component/CircleSelector/CircleSelector';\nimport Circles from './component/Circles/Circles';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentCircle: \"1\",\n      circles: [1,2,3,4]\n     }\n\nthis.selectCircle = this.selectCircle.bind(this);\n  }\n\nselectCircle (id) {\n  console.log(`Button Clicked + ${id}`);\nthis.setState({currentCircle: id})\nconsole.log(this.state.currentCircle)\n} \n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n        <main>\n         <CircleSelectors circles={this.state.circles}  currentCircle={this.state.currentCircle} selectCircle={this.selectCircle} />\n         <Circles circles={this.state.circles} currentCircle={this.state.currentCircle}  />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}